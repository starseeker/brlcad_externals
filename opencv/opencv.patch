diff -Naur opencv-4.8.0/.cache/.gitignore opencv/.cache/.gitignore
--- opencv-4.8.0/.cache/.gitignore	1969-12-31 19:00:00.000000000 -0500
+++ opencv/.cache/.gitignore	2023-09-15 10:21:11.015224413 -0400
@@ -0,0 +1 @@
+*
diff -Naur opencv-4.8.0/cmake/FindPNG.cmake opencv/cmake/FindPNG.cmake
--- opencv-4.8.0/cmake/FindPNG.cmake	1969-12-31 19:00:00.000000000 -0500
+++ opencv/cmake/FindPNG.cmake	2023-09-15 10:45:04.898760249 -0400
@@ -0,0 +1,190 @@
+# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+# file Copyright.txt or https://cmake.org/licensing for details.
+
+#[=======================================================================[.rst:
+FindPNG
+-------
+
+Find libpng, the official reference library for the PNG image format.
+
+Imported targets
+^^^^^^^^^^^^^^^^
+
+.. versionadded:: 3.5
+
+This module defines the following :prop_tgt:`IMPORTED` target:
+
+``PNG::PNG``
+The libpng library, if found.
+
+Result variables
+^^^^^^^^^^^^^^^^
+
+This module will set the following variables in your project:
+
+``PNG_INCLUDE_DIRS``
+where to find png.h, etc.
+``PNG_LIBRARIES``
+the libraries to link against to use PNG.
+``PNG_DEFINITIONS``
+You should add_definitions(${PNG_DEFINITIONS}) before compiling code
+that includes png library files.
+``PNG_FOUND``
+If false, do not try to use PNG.
+``PNG_VERSION_STRING``
+the version of the PNG library found (since CMake 2.8.8)
+
+Obsolete variables
+^^^^^^^^^^^^^^^^^^
+
+The following variables may also be set, for backwards compatibility:
+
+``PNG_LIBRARY``
+where to find the PNG library.
+``PNG_INCLUDE_DIR``
+where to find the PNG headers (same as PNG_INCLUDE_DIRS)
+
+Since PNG depends on the ZLib compression library, none of the above
+will be defined unless ZLib can be found.
+#]=======================================================================]
+
+if(PNG_FIND_QUIETLY)
+  set(_FIND_ZLIB_ARG QUIET)
+endif()
+find_package(ZLIB ${_FIND_ZLIB_ARG})
+
+if(ZLIB_FOUND)
+  set(_PNG_SEARCHES)
+
+  # Search PNG_ROOT first if it is set.
+  if(PNG_ROOT)
+    set(_PNG_SEARCH_ROOT PATHS ${PNG_ROOT} NO_DEFAULT_PATH)
+    list(APPEND _PNG_SEARCHES _PNG_SEARCH_ROOT)
+  endif()
+
+  list(APPEND PNG_NAMES png_brl libpng_brl png libpng)
+  unset(PNG_NAMES_DEBUG)
+  set(_PNG_VERSION_SUFFIXES 17 16 15 14 12)
+  if (PNG_FIND_VERSION MATCHES "^([0-9]+)\\.([0-9]+)(\\..*)?$")
+    set(_PNG_VERSION_SUFFIX_MIN "${CMAKE_MATCH_1}${CMAKE_MATCH_2}")
+    if (PNG_FIND_VERSION_EXACT)
+      set(_PNG_VERSION_SUFFIXES ${_PNG_VERSION_SUFFIX_MIN})
+    else ()
+      string(REGEX REPLACE
+	"${_PNG_VERSION_SUFFIX_MIN}.*" "${_PNG_VERSION_SUFFIX_MIN}"
+	_PNG_VERSION_SUFFIXES "${_PNG_VERSION_SUFFIXES}")
+    endif ()
+    unset(_PNG_VERSION_SUFFIX_MIN)
+  endif ()
+  foreach(v IN LISTS _PNG_VERSION_SUFFIXES)
+    list(APPEND PNG_NAMES png_brl${v} libpng_brl${v} png${v} libpng${v} libpng${v}_static)
+    list(APPEND PNG_NAMES_DEBUG png_brl${v}d libpng_brl${v}d png${v}d libpng${v}d libpng${v}_staticd)
+  endforeach()
+  unset(_PNG_VERSION_SUFFIXES)
+
+  # Try each search configuration.
+  # For compatibility with versions prior to this multi-config search, honor
+  # any PNG_LIBRARY that is already specified and skip the search.
+  if(NOT PNG_LIBRARY)
+    foreach(search ${_PNG_SEARCHES})
+      find_path(PNG_PNG_INCLUDE_DIR png.h ${${search}} PATH_SUFFIXES include include/libpng)
+      find_library(PNG_LIBRARY_RELEASE    ${${search}} NAMES ${PNG_NAMES} NAMES_PER_DIR PATH_SUFFIXES lib)
+      find_library(PNG_LIBRARY_DEBUG      ${${search}} NAMES ${PNG_NAMES_DEBUG} NAMES_PER_DIR PATH_SUFFIXES lib)
+      include(SelectLibraryConfigurations)
+      select_library_configurations(PNG)
+      mark_as_advanced(PNG_LIBRARY_RELEASE PNG_LIBRARY_DEBUG)
+    endforeach()
+  endif()
+
+  mark_as_advanced(PNG_LIBRARY)
+  mark_as_advanced(PNG_PNG_INCLUDE_DIR)
+
+  # If we still don't have PNG_LIBRARY, try without specifying search paths
+  if(NOT PNG_LIBRARY)
+    find_library(PNG_LIBRARY_RELEASE NAMES ${PNG_NAMES} NAMES_PER_DIR PATH_SUFFIXES lib)
+    find_library(PNG_LIBRARY_DEBUG NAMES ${PNG_NAMES_DEBUG} NAMES_PER_DIR PATH_SUFFIXES lib)
+    include(SelectLibraryConfigurations)
+    select_library_configurations(PNG)
+    mark_as_advanced(PNG_LIBRARY_RELEASE PNG_LIBRARY_DEBUG)
+  endif()
+  unset(PNG_NAMES)
+  unset(PNG_NAMES_DEBUG)
+
+  # Set by select_library_configurations(), but we want the one from
+  # find_package_handle_standard_args() below.
+  unset(PNG_FOUND)
+
+  if (PNG_LIBRARY AND PNG_PNG_INCLUDE_DIR)
+    # png.h includes zlib.h. Sigh.
+    set(PNG_INCLUDE_DIRS ${PNG_PNG_INCLUDE_DIR} ${ZLIB_INCLUDE_DIR} )
+    set(PNG_INCLUDE_DIR ${PNG_INCLUDE_DIRS} ) # for backward compatibility
+    set(PNG_LIBRARIES ${PNG_LIBRARY} ${ZLIB_LIBRARY})
+    if((CMAKE_SYSTEM_NAME STREQUAL "Linux") AND
+      ("${PNG_LIBRARY}" MATCHES "\\${CMAKE_STATIC_LIBRARY_SUFFIX}$"))
+      list(APPEND PNG_LIBRARIES m)
+    endif()
+
+    if (CYGWIN)
+      if(BUILD_SHARED_LIBS)
+	# No need to define PNG_USE_DLL here, because it's default for Cygwin.
+      else()
+	set (PNG_DEFINITIONS -DPNG_STATIC)
+	set(_PNG_COMPILE_DEFINITIONS PNG_STATIC)
+      endif()
+    endif ()
+
+    if(NOT TARGET PNG::PNG)
+      add_library(PNG::PNG UNKNOWN IMPORTED)
+      set_target_properties(PNG::PNG PROPERTIES
+	INTERFACE_COMPILE_DEFINITIONS "${_PNG_COMPILE_DEFINITIONS}"
+	INTERFACE_INCLUDE_DIRECTORIES "${PNG_INCLUDE_DIRS}"
+	INTERFACE_LINK_LIBRARIES ZLIB::ZLIB)
+      if((CMAKE_SYSTEM_NAME STREQUAL "Linux") AND
+	("${PNG_LIBRARY}" MATCHES "\\${CMAKE_STATIC_LIBRARY_SUFFIX}$"))
+	set_property(TARGET PNG::PNG APPEND PROPERTY
+	  INTERFACE_LINK_LIBRARIES m)
+      endif()
+
+      if(EXISTS "${PNG_LIBRARY}")
+	set_target_properties(PNG::PNG PROPERTIES
+	  IMPORTED_LINK_INTERFACE_LANGUAGES "C"
+	  IMPORTED_LOCATION "${PNG_LIBRARY}")
+      endif()
+      if(EXISTS "${PNG_LIBRARY_RELEASE}")
+	set_property(TARGET PNG::PNG APPEND PROPERTY
+	  IMPORTED_CONFIGURATIONS RELEASE)
+	set_target_properties(PNG::PNG PROPERTIES
+	  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "C"
+	  IMPORTED_LOCATION_RELEASE "${PNG_LIBRARY_RELEASE}")
+      endif()
+      if(EXISTS "${PNG_LIBRARY_DEBUG}")
+	set_property(TARGET PNG::PNG APPEND PROPERTY
+	  IMPORTED_CONFIGURATIONS DEBUG)
+	set_target_properties(PNG::PNG PROPERTIES
+	  IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG "C"
+	  IMPORTED_LOCATION_DEBUG "${PNG_LIBRARY_DEBUG}")
+      endif()
+    endif()
+
+    unset(_PNG_COMPILE_DEFINITIONS)
+  endif ()
+
+  if (PNG_PNG_INCLUDE_DIR AND EXISTS "${PNG_PNG_INCLUDE_DIR}/png.h")
+    file(STRINGS "${PNG_PNG_INCLUDE_DIR}/png.h" png_version_str REGEX "^#define[ \t]+PNG_LIBPNG_VER_STRING[ \t]+\".+\"")
+
+    string(REGEX REPLACE "^#define[ \t]+PNG_LIBPNG_VER_STRING[ \t]+\"([^\"]+)\".*" "\\1" PNG_VERSION_STRING "${png_version_str}")
+    unset(png_version_str)
+  endif ()
+endif()
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(PNG
+  REQUIRED_VARS PNG_LIBRARY PNG_PNG_INCLUDE_DIR
+  VERSION_VAR PNG_VERSION_STRING)
+
+# Local Variables:
+# tab-width: 8
+# mode: cmake
+# indent-tabs-mode: t
+# End:
+# ex: shiftwidth=2 tabstop=8
diff -Naur opencv-4.8.0/cmake/FindZLIB.cmake opencv/cmake/FindZLIB.cmake
--- opencv-4.8.0/cmake/FindZLIB.cmake	1969-12-31 19:00:00.000000000 -0500
+++ opencv/cmake/FindZLIB.cmake	2023-09-15 10:21:10.116229212 -0400
@@ -0,0 +1,123 @@
+#.rst:
+# FindZLIB
+# --------
+#
+# Find the native ZLIB includes and library.
+#
+# IMPORTED Targets
+# ^^^^^^^^^^^^^^^^
+#
+# This module defines :prop_tgt:`IMPORTED` target ``ZLIB::ZLIB``, if
+# ZLIB has been found.
+#
+# Result Variables
+# ^^^^^^^^^^^^^^^^
+#
+# This module defines the following variables:
+#
+# ::
+#
+#   ZLIB_INCLUDE_DIRS   - where to find zlib.h, etc.
+#   ZLIB_LIBRARIES      - List of libraries when using zlib.
+#   ZLIB_FOUND          - True if zlib found.
+#
+# ::
+#
+#   ZLIB_VERSION_STRING - The version of zlib found (x.y.z)
+#   ZLIB_VERSION_MAJOR  - The major version of zlib
+#   ZLIB_VERSION_MINOR  - The minor version of zlib
+#   ZLIB_VERSION_PATCH  - The patch version of zlib
+#   ZLIB_VERSION_TWEAK  - The tweak version of zlib
+#
+# Backward Compatibility
+# ^^^^^^^^^^^^^^^^^^^^^^
+#
+# The following variable are provided for backward compatibility
+#
+# ::
+#
+#   ZLIB_MAJOR_VERSION  - The major version of zlib
+#   ZLIB_MINOR_VERSION  - The minor version of zlib
+#   ZLIB_PATCH_VERSION  - The patch version of zlib
+#
+# Hints
+# ^^^^^
+#
+# A user may set ``ZLIB_ROOT`` to a zlib installation root to tell this
+# module where to look.
+
+#=============================================================================
+# Copyright 2001-2011 Kitware, Inc.
+#
+# Distributed under the OSI-approved BSD License (the "License");
+# see accompanying file Copyright.txt for details.
+#
+# This software is distributed WITHOUT ANY WARRANTY; without even the
+# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+# See the License for more information.
+#=============================================================================
+# (To distribute this file outside of CMake, substitute the full
+#  License text for the above reference.)
+
+set(_ZLIB_SEARCHES)
+
+# Search ZLIB_ROOT first if it is set.
+if(ZLIB_ROOT)
+  set(_ZLIB_SEARCH_ROOT PATHS ${ZLIB_ROOT} NO_DEFAULT_PATH)
+  list(APPEND _ZLIB_SEARCHES _ZLIB_SEARCH_ROOT)
+endif()
+
+# Normal search.
+set(_ZLIB_SEARCH_NORMAL
+  PATHS "[HKEY_LOCAL_MACHINE\\SOFTWARE\\GnuWin32\\Zlib;InstallPath]"
+        "$ENV{PROGRAMFILES}/zlib"
+  )
+list(APPEND _ZLIB_SEARCHES _ZLIB_SEARCH_NORMAL)
+
+set(ZLIB_NAMES z_brl z zlib zdll zlib1 zlibd zlibd1)
+
+# Try each search configuration.
+foreach(search ${_ZLIB_SEARCHES})
+  find_path(ZLIB_INCLUDE_DIR NAMES zlib.h        ${${search}} PATH_SUFFIXES include)
+  find_library(ZLIB_LIBRARY  NAMES ${ZLIB_NAMES} ${${search}} PATH_SUFFIXES lib)
+endforeach()
+
+mark_as_advanced(ZLIB_LIBRARY ZLIB_INCLUDE_DIR)
+
+if(ZLIB_INCLUDE_DIR AND EXISTS "${ZLIB_INCLUDE_DIR}/zlib.h")
+    file(STRINGS "${ZLIB_INCLUDE_DIR}/zlib.h" ZLIB_H REGEX "^#define ZLIB_VERSION \"[^\"]*\"$")
+
+    string(REGEX REPLACE "^.*ZLIB_VERSION \"([0-9]+).*$" "\\1" ZLIB_VERSION_MAJOR "${ZLIB_H}")
+    string(REGEX REPLACE "^.*ZLIB_VERSION \"[0-9]+\\.([0-9]+).*$" "\\1" ZLIB_VERSION_MINOR  "${ZLIB_H}")
+    string(REGEX REPLACE "^.*ZLIB_VERSION \"[0-9]+\\.[0-9]+\\.([0-9]+).*$" "\\1" ZLIB_VERSION_PATCH "${ZLIB_H}")
+    set(ZLIB_VERSION_STRING "${ZLIB_VERSION_MAJOR}.${ZLIB_VERSION_MINOR}.${ZLIB_VERSION_PATCH}")
+
+    # only append a TWEAK version if it exists:
+    set(ZLIB_VERSION_TWEAK "")
+    if( "${ZLIB_H}" MATCHES "ZLIB_VERSION \"[0-9]+\\.[0-9]+\\.[0-9]+\\.([0-9]+)")
+        set(ZLIB_VERSION_TWEAK "${CMAKE_MATCH_1}")
+        set(ZLIB_VERSION_STRING "${ZLIB_VERSION_STRING}.${ZLIB_VERSION_TWEAK}")
+    endif()
+
+    set(ZLIB_MAJOR_VERSION "${ZLIB_VERSION_MAJOR}")
+    set(ZLIB_MINOR_VERSION "${ZLIB_VERSION_MINOR}")
+    set(ZLIB_PATCH_VERSION "${ZLIB_VERSION_PATCH}")
+endif()
+
+# handle the QUIETLY and REQUIRED arguments and set ZLIB_FOUND to TRUE if
+# all listed variables are TRUE
+include(FindPackageHandleStandardArgs)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(ZLIB REQUIRED_VARS ZLIB_LIBRARY ZLIB_INCLUDE_DIR
+                                       VERSION_VAR ZLIB_VERSION_STRING)
+
+if(ZLIB_FOUND)
+    set(ZLIB_INCLUDE_DIRS ${ZLIB_INCLUDE_DIR})
+    set(ZLIB_LIBRARIES ${ZLIB_LIBRARY})
+
+    if(NOT TARGET ZLIB::ZLIB)
+      add_library(ZLIB::ZLIB UNKNOWN IMPORTED)
+      set_target_properties(ZLIB::ZLIB PROPERTIES
+        IMPORTED_LOCATION "${ZLIB_LIBRARY}"
+        INTERFACE_INCLUDE_DIRECTORIES "${ZLIB_INCLUDE_DIRS}")
+    endif()
+endif()
diff -Naur opencv-4.8.0/CMakeLists.txt opencv/CMakeLists.txt
--- opencv-4.8.0/CMakeLists.txt	2023-09-15 10:46:52.339250212 -0400
+++ opencv/CMakeLists.txt	2023-09-15 10:21:10.118229202 -0400
@@ -14,6 +14,7 @@
 ")
 endif()
 
+list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
 
 include(cmake/OpenCVMinDepVersions.cmake)
 
@@ -66,6 +67,10 @@
   cmake_policy(SET CMP0068 NEW)  # CMake 3.9+: `RPATH` settings on macOS do not affect `install_name`.
 endif()
 
+if (POLICY CMP0074)
+  cmake_policy(SET CMP0074 NEW)  # CMake 3.12+: find_package() uses <PackageName>_ROOT variables.
+endif (POLICY CMP0074)
+
 if(POLICY CMP0075)
   cmake_policy(SET CMP0075 NEW)  # CMake 3.12+: Include file check macros honor `CMAKE_REQUIRED_LIBRARIES`
 endif()
@@ -1049,7 +1054,7 @@
 if(ANDROID OR NOT UNIX)
   install(FILES ${OPENCV_LICENSE_FILE}
         PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
-        DESTINATION ./ COMPONENT libs)
+        DESTINATION doc/legal/other/opencv COMPONENT libs)
   if(OPENCV_README_FILE)
     install(FILES ${OPENCV_README_FILE}
             PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
