# Unless we have ENABLE_ALL set, based the building of opencolorio on
# the system detection results
if (ENABLE_ALL AND NOT DEFINED ENABLE_OPENCOLORIO)
  set(ENABLE_OPENCOLORIO ON)
endif (ENABLE_ALL AND NOT DEFINED ENABLE_OPENCOLORIO)

if (NOT ENABLE_OPENCOLORIO)

  find_package(OPENCOLORIO)

  if (NOT OPENCOLORIO_FOUND AND NOT DEFINED ENABLE_OPENCOLORIO)
    set(ENABLE_OPENCOLORIO "ON" CACHE BOOL "Enable opencolorio build")
  endif (NOT OPENCOLORIO_FOUND AND NOT DEFINED ENABLE_OPENCOLORIO)

endif (NOT ENABLE_OPENCOLORIO)
set(ENABLE_OPENCOLORIO "${ENABLE_OPENCOLORIO}" CACHE BOOL "Enable opencolorio build")

if (ENABLE_OPENCOLORIO)

  set(OPENCOLORIO_DEPENDS EXPAT MINIZIP_NG PYSTRING YAML_CPP ZLIB)

  TargetVars(OPENCOLORIO_DEPENDS)

  if (TARGET ZLIB_BLD)
    set(Z_PREFIX_STR "brl_")
  endif (TARGET ZLIB_BLD)


  ExternalProject_Add(OPENCOLORIO_BLD
    URL "${CMAKE_CURRENT_SOURCE_DIR}/opencolorio"
    BUILD_ALWAYS ${EXT_BUILD_ALWAYS} ${LOG_OPTS}
    PATCH_COMMAND ${PATCH_EXECUTABLE};-E;-p1;${PATCH_OPTIONS};-i;${CMAKE_CURRENT_SOURCE_DIR}/opencolorio.patch
    CMAKE_ARGS
    ${BUILD_TYPE_SPECIFIER}
    $<$<BOOL:${ZLIB_TARGET}>:-DZ_PREFIX=ON>
    $<$<BOOL:${ZLIB_TARGET}>:-DZ_PREFIX_STR=${Z_PREFIX_STR}>
    -DZLIB_ROOT=$<$<BOOL:${ZLIB_TARGET}>:${CMAKE_BUNDLE_INSTALL_PREFIX}>
    -Dpystring_ROOT=$<$<BOOL:${PYSTRING_TARGET}>:${CMAKE_BUNDLE_INSTALL_PREFIX}>
    -Dminizip-ng_ROOT=$<$<BOOL:${MINIZIP_NG_TARGET}>:${CMAKE_BUNDLE_INSTALL_PREFIX}>
    -Dexpat_ROOT=$<$<BOOL:${EXPAT_TARGET}>:${CMAKE_BUNDLE_INSTALL_PREFIX}>
    -Dyaml-cpp_ROOT=$<$<BOOL:${YAML_CPP_TARGET}>:${CMAKE_BUNDLE_INSTALL_PREFIX}>
    -DBUILD_TESTING=OFF
    -DOCIO_BUILD_APPS=OFF
    -DOCIO_BUILD_DOCS=OFF
    -DOCIO_BUILD_GPU_TESTS=OFF
    -DOCIO_BUILD_PYTHON=OFF
    -DOCIO_BUILD_TESTS=OFF
    -DBIN_DIR=${BIN_DIR}
    -DLIB_DIR=${LIB_DIR}
    -DBUILD_STATIC_LIBS=${BUILD_STATIC_LIBS}
    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
    -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
    -DCMAKE_INSTALL_PREFIX=${CMAKE_BUNDLE_INSTALL_PREFIX}
    LOG_CONFIGURE ${EXT_BUILD_QUIET}
    LOG_BUILD ${EXT_BUILD_QUIET}
    LOG_INSTALL ${EXT_BUILD_QUIET}
    LOG_OUTPUT_ON_FAILURE ${EXT_BUILD_QUIET}
    STEP_TARGETS install
    )

  TargetInstallDeps(OPENCOLORIO OPENCOLORIO_DEPENDS)

  if (TARGET PATCH_BLD)
    ExternalProject_Add_StepDependencies(OPENCOLORIO_BLD configure PATCH_BLD-install)
  endif (TARGET PATCH_BLD)

endif (ENABLE_OPENCOLORIO)

# Copy the license into position in CMAKE_BUNDLE_INSTALL_PREFIX
file(MAKE_DIRECTORY ${CMAKE_BUNDLE_INSTALL_PREFIX}/doc/legal/other)
configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/opencolorio/LICENSE
  ${CMAKE_BUNDLE_INSTALL_PREFIX}/doc/legal/other/opencolorio.txt
  COPYONLY
  )

# Local Variables:
# tab-width: 8
# mode: cmake
# indent-tabs-mode: t
# End:
# ex: shiftwidth=2 tabstop=8

